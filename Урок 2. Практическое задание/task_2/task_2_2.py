"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""
'''my_num = int(input('Введите натуральное число'))
print(my_num // 10)
print((my_num % 10)% 2)
'''

def Even_and_odd_in_num(my_num, counter_even, counter_odd):
    if my_num == 0:
        return print("Количество четных и нечетных цифр в числе равно: ({}, {})".format(counter_even,counter_odd))
    else:
        if (my_num % 10)% 2 == 0:
            counter_even += 1
        else:
            counter_odd += 1
        return Even_and_odd_in_num(my_num // 10,counter_even, counter_odd)


counter_even = 0    # не знаю как засунуть эти два счетчика в функцию
counter_odd = 0     # поэтому пришлось вывести их отдельно
my_num = int(input('Введите натуральное число'))
Even_and_odd_in_num(my_num,counter_even,counter_odd)
